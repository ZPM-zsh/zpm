#!/usr/bin/env zsh

fpath+=("${_ZPM_DIR}/functions")

if [[ "$CLICOLOR" != "0" ]]; then
  typeset -gA c=(
    reset "[0m"
    bold "[1m"

    black "[30m"
    red "[31m"
    green "[32m"
    yellow "[33m"
    blue "[34m"
    magenta "[35m"
    cyan "[36m"
    grey "[37m"
  )
fi

autoload -Uz                   \
  @zpm-get-plugin-name         \
  @zpm-get-plugin-type         \
  @zpm-get-plugin-basename     \
  @zpm-get-plugin-path         \
  @zpm-get-plugin-link         \
  @zpm-get-plugin-hyperlink    \
  @zpm-log                     \
  @zpm-get-git-work-tree

local Plugin_name=$(@zpm-get-plugin-name "$2")
local Plugin_type=$(@zpm-get-plugin-type "$2")
local Plugin_basename=$(@zpm-get-plugin-basename "$Plugin_name")
local Plugin_path=$(@zpm-get-plugin-path "$Plugin_name")
local Plugin_link=$(@zpm-get-plugin-link "$Plugin_name" "$Plugin_type")
local Plugin_hyperlink=$(@zpm-get-plugin-hyperlink "$Plugin_name" "$Plugin_link")
local Plugin_git_work_tree=$(@zpm-get-git-work-tree "$Plugin_path" "$Plugin_type")

if [[ "$1" == "upgrade" ]]; then
  @zpm-log zpm:upgrade "Upgrade '${2}'"

  if [[ "$Plugin_type" == (github|gitlab|bitbucket|omz) ]]; then
    git --git-dir="${Plugin_git_work_tree}/.git/" --work-tree="${Plugin_git_work_tree}/" checkout "${Plugin_git_work_tree}/" </dev/null >/dev/null 2>/dev/null
    git --git-dir="${Plugin_git_work_tree}/.git/" --work-tree="${Plugin_git_work_tree}/" pull </dev/null >/dev/null 2>/dev/null
  else
    true
  fi

  local status_string="${c[green]}${c[bold]}Upgrade${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"

  echo $status_string
else
  if [[ "$Plugin_type" == "github" ]]; then
    git clone --recursive "https://github.com/${Plugin_name}" --depth 1 --single-branch "${Plugin_git_work_tree}" </dev/null >/dev/null 2>/dev/null
  elif [[ "$Plugin_type" == "gitlab" ]]; then
    git clone --recursive "https://gitlab.com/${Plugin_name}" --depth 1 --single-branch "${Plugin_git_work_tree}" </dev/null >/dev/null 2>/dev/null
  elif [[ "$Plugin_type" == "bitbucket" ]]; then
    git clone --recursive "https://bitbucket.com/${Plugin_name}" --depth 1 --single-branch "${Plugin_git_work_tree}" </dev/null >/dev/null 2>/dev/null
  elif [[ "$Plugin_type" == "empty" ]]; then
    mkdir -p "${Plugin_path}"
  elif [[ "$Plugin_type" == "omz" ]]; then
    if [[ ! -e "${HOME}/.oh-my-zsh" ]]; then
      git clone --recursive "https://github.com/ohmyzsh/ohmyzsh" --depth 1 --single-branch "${Plugin_git_work_tree}" </dev/null >/dev/null 2>/dev/null
    fi
    ln -s "${HOME}/.oh-my-zsh/plugins/${Plugin_basename}" "$Plugin_path" 2>/dev/null
    true
  fi

  if [[ "$?" == "0" ]]; then
    local status_string="${c[green]}${c[bold]}Install${c[reset]} "
    status_string+="$Plugin_hyperlink"
    status_string+=" ${c[green]}âœ”${c[reset]}"

    echo $status_string
  else
    local status_string="${c[red]}${c[bold]}Can't install${c[reset]} "
    status_string+="$Plugin_hyperlink"
    status_string+=" ${c[red]}${c[bold]}âœ–${c[reset]}"
    echo $status_string
  fi
fi

if [[ "$2" == *",gen-pl:"* && -e "$Plugin_path" ]]; then
  local status_string="${c[cyan]}${c[bold]}Generate plugin for:${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"

  cd "$Plugin_path"
  eval "${${2##*,gen-pl:}%%\,*}" > "${Plugin_path}/zpm-generated.zsh"

  echo "$status_string"
fi

if [[ "$2" == *",gen-comp:"* && -e "$Plugin_path" ]]; then
  local status_string="${c[cyan]}${c[bold]}Generate completion for:${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"

  cd "$Plugin_path"
  mkdir -p "${Plugin_path}/functions"
  eval "${${2##*,gen-comp:}%%\,*}" >"${Plugin_path}/functions/_${Plugin_basename}"

  echo "$status_string"
fi

if [[ "$2" == *",hook:"* && -e "$Plugin_path" ]]; then
  local status_string="${c[magenta]}${c[bold]}Run hook for${c[reset]} "
  status_string+="$Plugin_hyperlink"
  status_string+=" ${c[green]}âœ”${c[reset]}"

  cd "$Plugin_path"
  eval "${${2##*,hook:}%%\,*}" >/dev/null

  echo "$status_string"
fi
