#compdef zpm
#autoload

autoload -Uz @zpm-get-plugin-name

local _zpm_completions_plugins_local=()
for plugin in "$_ZPM_PLUGIN_DIR/"*; do
  _zpm_completions_plugins_local+=( ${${plugin:t}//---/\/} )
done

local _zpm_completions_plugins_loadable=($(
    echo ${_zpm_completions_plugins_local[@]} ${zsh_loaded_plugins[@]} | tr ' ' '\n' | sort | uniq -u
))

local _zpm_upgrade_plugins=(@zpm $zsh_loaded_plugins)

local _load_args=(
  'load:Load plugin'
  'if:Load plugin if condition true'
  'if-not:Load plugin if condition false'
)

local _zpm_all_args=(
  $_load_args
  'clean:Remove zpm cache'
  'upgrade:Upgrade plugin'
  $_zpm_extend_commands
)

local _zpm_completions_if_args=(
  'linux:Linux OS'
  'bsd:BSD OS'
  'macos:MacOS'
  'android:Android OS'
  'termux:Termux app'
  'ssh:SSH session'
  'vte:VTE based terminal emulator'
)

_arguments '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "zpm subcommand" _zpm_all_args
  return
fi

if (( CURRENT > 1 )); then
  PRE=$((CURRENT - 1))
  PRE2=$((CURRENT - 2))

  if [[ "$words[$PRE]" == 'load' ]]; then
    _describe -t commands "zpm load" _zpm_completions_plugins_loadable
    return
  elif [[ "$words[$PRE]" == 'if' || "$words[$PRE]" == 'if-not' ]]; then
    _describe -t commands "zpm condition" _zpm_completions_if_args
    return
  elif [[ "$words[$PRE2]" == 'if' || "$words[$PRE2]" == 'if-not'  ]]; then
    _describe -t commands "zpm next condition" _load_args
    return
  elif [[ "$words[$PRE]" == 'clean' ]]; then
    return
  elif [[ "$words[$PRE]" == 'u' || "$words[$PRE]" == 'up' || "$words[$PRE]" == 'upgrade' ]]; then
    _describe -t commands "zpm upgrade plugins" _zpm_upgrade_plugins
    return
  elif is-callable "_zpm_${words[$PRE]}_completion"; then
    "_zpm_${words[$PRE]}_completion"
    return
  else
    _describe -t commands "zpm subcommand" zsh_loaded_plugins
    return
  fi
fi

return
