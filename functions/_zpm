#compdef zpm
#autoload

autoload -Uz _ZPM_get_plugin_name

typeset -g _zpm_completions_plugins_local=()
for plugin in "$_ZPM_PLUGIN_DIR/"*; do
  local unused=${plugin:t}
  _zpm_completions_plugins_local+=( ${unused//---/\/} )
done

typeset -g _zpm_completions_plugins_loadable=($(
    echo ${_zpm_completions_plugins_local[@]} ${zsh_loaded_plugins[@]} | tr ' ' '\n' | sort | uniq -u
))

_zpm_completions_1st_arguments=(
  'load:Load plugin'
  'if:Load plugin if condition true'
  'if-not:Load plugin if condition false'
)

_zpm_completions_1st_arguments_full=(
  'clean:Remove zpm cache'
  'upgrade:Upgrade plugin'
  'load:Load plugin'
  'if:Load plugin if condition true'
  'if-not:Load plugin if condition false'
)

_zpm_completions_if_args=(
  'linux:Linux OS'
  'bsd:BSD OS'
  'macos:MacOS'
  'android:Android OS'
  'termux:Termux app'
  'ssh:SSH session'
  'vte:VTE based terminal emulator'
)

_arguments \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "zpm subcommand" _zpm_completions_1st_arguments_full
  return
fi

if [[ "$words[1]" == 'clean' ]]; then
  return
fi

if (( CURRENT > 1 )); then
  PRE=$((CURRENT - 1))
  if [[ "$words[$PRE]" == "if" || "$words[$PRE]" == "if-not" ]]; then
    _describe -t commands "zpm condition" _zpm_completions_if_args
  elif ((${words[(I)load]})); then
    _describe -t commands "zpm load" _zpm_completions_plugins_loadable
  elif ((${words[(I)u]})) || ((${words[(I)up]})) || ((${words[(I)upgrade]})); then
    _describe -t commands "zpm plugins" zsh_loaded_plugins
  else
    _describe -t commands "zpm subcommand" _zpm_completions_1st_arguments
  fi
fi

return